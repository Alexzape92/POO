//La clase menu tiene una relación de composición con opción, navegable de menú a opción. 1 menú se compone de * opciones.
class menu{
public:
	typedef std::set<opcion> opciones;
	void tiene_opcion(const opcion& op);	//Añade op a ops
	const opciones& opciones_menu() const;
private:
	opciones ops;
};

//La clase opcion se relaciona con un formulario, y un formulario con * opciones. Navegable de opcion a formulario.
class opcion{
public:
	opcion(const formulario& f);	//form = &f
	const formulario& formu() const;
private:
	const formulario* form;
};

class formulario{
public:
/*...*/
private:
*/...*/
};

//EJERCICIO 2-----------------------------------------------------------------------------------------------------------------------------------

class Alumno{
public:
	typedef std::map<Asignatura*, Grupo*> Matriculas;
	void matricular(const Asignatura& asig, const Grupo& grp);
	const Matriculas& matriculas_alumno() const;
private:
	Matriculas mats;
};

class Asignatura{
public:
	typedef std::map<Alumno*, Grupo*> Matriculados;
	typedef std::set<Grupo*> Grupos;
	Asignatura(const Grupos& gs);	//gs tiene que tener al menos un grupo siempre
	void añadir_matriculado(const Alumno& alum, const Grupo& grp);
	const Matriculados& alumnos_grupo() const;
	void añadir_grupo(const Grupo& grp);
	const Grupos& grupos_asig() const;
private:
	Matriculados mats;
	Grupos grps;
};

class Grupo{
public:
	Grupo(const Asigntatura& a, const Profesor& p);
private:
	const Asignatura* asig;
	const Profesor* prof;
	std::string aula;
	int h_semana;
};


//EJERCICIO 5----------------------------------------------------------------------------------------------------------------------------------
class Profesor_Grupo{
public:
	void imparte(const Profesor&, const Grupo&);
	void imparte(const Grupo&, const Profesor&);
	const std::set<Grupo*>& impartidos(const Profesor&) const;
	const Profesor* impartidos(const Grupo&) const;
private:
	typedef std::map<Profesor*, std::set<Grupo*>> Profesores-Grupos;
	typedef std::map<Grupo*, Profesor*> Grupos-Profesores;
	
	Profesores-Grupos prof-grp;
	Grupos-Profesores grp_prof;
}

//EJERCICIO 4--------------------------------------------------------------------------------------------------------------------------------
class Alumno_Asignatura{
public:
	void matriculado_en(const Alumno&, const Asignatura&, const Grupo&);
	void matriculado_en(const Asignatura&, const Alumno&, const Grupo&);
	const std::set<Asignatura*>& matriculados(const Alumno&) const;
	const std::set<Alumno*>& matriculados(const Asignatura&) const;
private:
	typedef std::map<Alumno*, std::map<Asignatura*, Grupo*>> Alumnos-Asignaturas;
	typedef std::map<Asignatura*, std::map<Alumno*, Grupo*>> Asignaturas-Alumnos;
	
	Alumnos-Asignaturas alum-asig;
	Asignaturas-Alumnos asig-alum;
}

//EJERCICIO 6----------------------------------------------------------------------------------------------------------------------------------
void Alumno_Asignatura::matriculado_en(const Alumno& Al, const Asignatura& As, const Grupo& G){
	alum_asig[&Al][&As] = &G;	/*Los corchetes nos cambian el valor si la clave ya está insertada, con .insert() 									simplemente no cambiaría nada en caso de intentar añadirlo por segunda vez*/
	asig_alum[&As][&Al] = &G;
}

void Alumno_Asignatura::matriculado_en(const Asignatura& As, const Alumno& Al, const Grupo& G){
	matriculado_en(Al, As, G);
}
//EJERCICIO 7---------------------------------------------------------------------------------------------------------------------------------








